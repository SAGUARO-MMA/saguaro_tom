# Generated by Django 4.2 on 2023-08-11 01:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("tom_surveys", "0003_auto_20230810_2050"),
        ("custom_code", "0020_cssfieldcredibleregion_observation_record_and_more"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="candidate",
            options={},
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="exclude",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="field",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="gladeid",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="htm16id",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="mjdmid",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="ncombine",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="obsdate",
        ),
        migrations.RemoveField(
            model_name="candidate",
            name="rawfilename",
        ),
        migrations.AddField(
            model_name="candidate",
            name="observation_record",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="tom_surveys.surveyobservationrecord",
            ),
        ),
    ]

# After running this migration, populate the observation records and link candidates to them using the following code:
# from tom_surveys.models import SurveyObservationRecord
# from custom_code.models import Candidate
# from astropy.time import Time, TimezoneInfo
# distinct_candidates = Candidate.objects.order_by('filename').distinct('filename')
# for c in distinct_candidates:
#     date_obs = Time(c.mjdmid, format='mjd').to_datetime(timezone=TimezoneInfo()) if c.mjdmid != -1. else c.obsdate
#     sor = SurveyObservationRecord.objects.create(
#         survey_field=c.field,
#         facility='CSS',
#         parameters={'ncombine': c.ncombine},
#         observation_id=c.filename,
#         status='COMPLETED',
#         scheduled_start=date_obs,
#     )
#     candidates = Candidate.objects.filter(filename=c.filename)
#     candidates.update(observation_record=sor)
